#ifndef __SERV_CHANNEL_HPP
#define __SERV_CHANNEL_HPP

#include "SchedulerTypes.hpp"
#include "linklist/linked_list_map.hpp"
#include "Channel.hpp"

class ServChannel; 
struct HostChannel
{
    typedef linked_list<Resource, &Resource::prior_lst_node_> HostResList;

    char scheme; 
    std::string host_;
    ServChannel *serv_;
    HostResList res_lst_;
    linked_list_node_t serv_lst_node_;
 
    size_t      wait_cnt_;
    unsigned    fetch_interval_;
    size_t      ref_cnt_;

    HostChannel(): scheme(0), serv_(NULL), wait_cnt_(0),
        fetch_interval_(0), ref_cnt_(0)
    {}

    void SetServChannel(ServChannel * serv_channel); 
    void AddResource(Resource* res);
    void PopResource();
    void RemoveResource(Resource* res); 
    size_t WaitCnt() const;
    size_t RefCnt() const;
    void AcquireRef() const;
    void ReleaseRef() const;
};

long long aigetkey(const struct addrinfo *addrinfo, const struct sockaddr* local_addr = NULL);

class ServChannel
{
public:
    static const unsigned MAX_CONN_NUM        = 700000;
    static const double   DEFAULT_MAX_ERR_RATE= 0.8;
    enum ConcurencyMode
    {
        NO_CONCURENCY,
        CONCURENCY_PER_SERV, 
        CONCURENCY_NO_LIMIT
    }

    typedef linked_list_map<ResourcePriority, Resource, &Resource::prior_lst_node_> ResPriorMap;
    typedef boost::function<void (Resource*)> RemoveResCallback;
    typedef linked_list<HostChannel, &HostChannel::serv_lst_node_> HostChannelList;

protected:
    StasticCount<double, 10> err_rate_;
    time_t   fetch_time_ms_;
    StasticCount<double, 10> resp_time_;
    bool     is_foreign_;
    unsigned concurency_mode_;
    std::queue<Connection*> conn_storage_;
    sockaddr* local_addr_;
    unsigned conn_using_cnt_;
    //等待的Resource列表
    ResPriorMap res_lst_map_;
    linked_list_node_t wait_lst_node_;
    linked_list_node_t timed_lst_node_;
    //所对应的HostChannel
    HostChannelList host_lst_; 
    unsigned fetch_interval_ms_;
    double max_err_rate_;
    time_t update_time_;
    
protected:
    struct addrinfo* __copy_addrinfo(struct addrinfo* addr);
    struct sockaddr* __copy_sockaddr(struct sockaddr* addr);
    Connection* __create_connection(struct sockaddr* dst_addr);
    Connection* __acquire_connection();
    void __release_connection();

public:
    //fetch_interval_ms为抓取的间隔时间, 单位为毫秒
    ServChannel(struct addrinfo * ai,
        unsigned max_err_rate, 
        unsigned concurency_mode    = CONCURENCY_PER_SERV, 
        struct sockaddr* local_addr = NULL);
    virtual ~ServChannel();
    void AddSucc();
    void AddFail();
    void AddRespTime();
    void SetForeign();
    void UpdateFetchTime();
    double GetAvgRespTime();
    double GetSuccRate();
    double GetFetchIntervalMs();
    bool IsForeign();
    bool IsServErr();
    bool ConnectionAvailable();
    Resource* PopResource();
    Resource* PopAvailableResource();
    size_t ResourceCnt();
    size_t ReadyTime(time_t cur_time);
    void SetFetchTime(time_t cur_time);
    void SetUpdateTime();
    time_t GetUpdateTime();
    void AddResource(Resource* res);
    void RemoveResource(Resource* res);
    void AddHostChannel(HostChannel* host_channel);
    void RemoveHostChannel(HostChannel* host_channel);
};

#endif
